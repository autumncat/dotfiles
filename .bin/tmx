#!/bin/bash

#
# Tmux launcher
#
# Modified version of a script orginally found at:
#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html
#

# Usage
if [[ -z "$1" ]]; then
    echo "Specify session name as the first argument"
    exit
fi

# Only because I often issue `ls` to this script by accident
if [[ "$1" == "ls" ]]; then
    tmux ls
    exit
fi

#If we're running inside iTerm, integrate with its tmux support
if [ x"$TERM_PROGRAM" = x"iTerm.app" ]; then
    TMUX_CMD="tmux -CC"
else
    TMUX_CMD="tmux"
fi

# Works because bash automatically trims by assigning to variables and by 
# passing arguments
# trim() { echo $1; }

#TMUX_SUPPORTS_MINUS_F=$(tmux list-sessions -F '#{session_name}' > /dev/null 2>&1 && echo 0 || echo 1)
#...but that hangs on Linux due to epoll problems -- see
# https://sourceforge.net/tracker/?func=detail&atid=973262&aid=3489496&group_id=200378
#TMUX_SUPPORTS_MINUS_F=1  #disable -F support
# -F support is required now

get_base_session_id()
{
    tmux ls -F '#{session_id}:#{session_name}' | egrep "^[^:]+:${base_session_name}\$" | cut -d: -f1
}

kill_unattached_sessions ()
{
    local session_list=`tmux ls -F '#{session_id}:#{session_group}:#{session_attached}'`
    # get group id
    local group_id=`grep "^${base_session_id}:" <<<"$session_list" | cut -d: -f2`
    if [ -n "$group_id" ]
    then
        local kill_list=`grep ":${group_id}:0$" <<<"$session_list" | cut -d: -f1`
        for i in $kill_list
        do
            [ "$i" != "$base_session_id" ] && tmux kill-session -t "$i"
        done
    fi
}

# start base_session, if it doesn't exist.
base_session_name="$1"
$TMUX_CMD new-session -d -s "$base_session_name" || true
base_session_id=`get_base_session_id`

if [ -z "$base_session_id" ]
then
    echo something goes wrong
    exit 1
fi

kill_unattached_sessions

session_list=`tmux ls -F '#{session_name}'`
for i in `seq 50`
do
    # skip occupied names
    grep "${base_session_name}-${i}" <<<"$session_list" && continue
    # try to creat a new window until we succeed
    exec $TMUX_CMD new-session -t "$base_session_id" -s "${base_session_name}-${i}"
done

echo Oops
exit 1
